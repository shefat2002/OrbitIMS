@model IEnumerable<OrbitIMS.Data.Customer>

@{
    ViewData["Title"] = "Customers";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Customers</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#customerModal" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add New Customer
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="customersTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Mobile</th>
                                    <th>Address</th>
                                    <th>Created At</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr id="row-@item.Id">
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>@item.Email</td>
                                        <td>@item.Mobile</td>
                                        <td>@item.Address</td>
                                        <td>@item.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(@item.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(@item.Id, '@item.Name')" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Customer Modal (Create/Edit) -->
<div class="modal fade" id="customerModal" tabindex="-1" aria-labelledby="customerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customerModalLabel">Add New Customer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="customerForm">
                    <input type="hidden" id="customerId" value="0" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customerName" class="form-label">Customer Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="customerName" name="Name" required maxlength="100">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customerEmail" class="form-label">Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="customerEmail" name="Email" required maxlength="100">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customerMobile" class="form-label">Mobile <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control" id="customerMobile" name="Mobile" required maxlength="20">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customerAddress" class="form-label">Address</label>
                                <textarea class="form-control" id="customerAddress" name="Address" rows="2" maxlength="500"></textarea>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCustomerBtn" onclick="saveCustomer()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Customer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the customer <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="deleteCustomer()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentCustomerId = 0;

        // Show loading spinner
        function showSpinner(buttonId) {
            const button = document.getElementById(buttonId);
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.remove('d-none');
            button.disabled = true;
        }

        // Hide loading spinner
        function hideSpinner(buttonId) {
            const button = document.getElementById(buttonId);
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.add('d-none');
            button.disabled = false;
        }

        // Clear form validation
        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        // Validate email format
        function isValidEmail(email) {
            var emailRegex = new RegExp("^[^\\s@@]+@@[^\\s@@]+\\.[^\\s@@]+$");
            return emailRegex.test(email);
        }

        // Validate mobile format
        function isValidMobile(mobile) {
            var mobileRegex = new RegExp("^[\\+]?[1-9]?[\\d]{7,15}$");
            return mobileRegex.test(mobile);
        }

        // Open create modal
        function openCreateModal() {
            document.getElementById('customerModalLabel').textContent = 'Add New Customer';
            document.getElementById('customerForm').reset();
            document.getElementById('customerId').value = '0';
            currentCustomerId = 0;
            clearValidation();
        }

        // Open edit modal
        function openEditModal(id) {
            currentCustomerId = id;
            document.getElementById('customerModalLabel').textContent = 'Edit Customer';
            
            // Get customer data using jQuery AJAX
            $.ajax({
                url: `/Customers/GetCustomer/${id}`,
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (data.success) {
                        document.getElementById('customerId').value = data.data.id;
                        document.getElementById('customerName').value = data.data.name;
                        document.getElementById('customerEmail').value = data.data.email;
                        document.getElementById('customerMobile').value = data.data.mobile;
                        document.getElementById('customerAddress').value = data.data.address;
                        clearValidation();
                        
                        // Show modal
                        const modal = new bootstrap.Modal(document.getElementById('customerModal'));
                        modal.show();
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    showError('Error loading customer data');
                }
            });
        }

        // Save customer (create or update)
        function saveCustomer() {
            const customerData = {
                Id: parseInt(document.getElementById('customerId').value),
                Name: document.getElementById('customerName').value,
                Email: document.getElementById('customerEmail').value,
                Mobile: document.getElementById('customerMobile').value,
                Address: document.getElementById('customerAddress').value
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            // Validate Name
            if (!customerData.Name || customerData.Name.trim() === '') {
                document.getElementById('customerName').classList.add('is-invalid');
                document.querySelector('#customerName + .invalid-feedback').textContent = 'Customer name is required.';
                isValid = false;
            }

            // Validate Email
            if (!customerData.Email || customerData.Email.trim() === '') {
                document.getElementById('customerEmail').classList.add('is-invalid');
                document.querySelector('#customerEmail + .invalid-feedback').textContent = 'Email is required.';
                isValid = false;
            } else if (!isValidEmail(customerData.Email)) {
                document.getElementById('customerEmail').classList.add('is-invalid');
                document.querySelector('#customerEmail + .invalid-feedback').textContent = 'Please enter a valid email address.';
                isValid = false;
            }

            // Validate Mobile
            if (!customerData.Mobile || customerData.Mobile.trim() === '') {
                document.getElementById('customerMobile').classList.add('is-invalid');
                document.querySelector('#customerMobile + .invalid-feedback').textContent = 'Mobile number is required.';
                isValid = false;
            } else if (!isValidMobile(customerData.Mobile)) {
                document.getElementById('customerMobile').classList.add('is-invalid');
                document.querySelector('#customerMobile + .invalid-feedback').textContent = 'Please enter a valid mobile number.';
                isValid = false;
            }

            if (!isValid) return;

            showSpinner('saveCustomerBtn');

            const url = customerData.Id === 0 ? '/Customers/CreateCustomer' : '/Customers/UpdateCustomer';
            
            // Using jQuery AJAX
            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(customerData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('saveCustomerBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#customerModal').modal('hide');
                        
                        if (customerData.Id === 0) {
                            // Add new row to table
                            addRowToTable(data.data);
                        } else {
                            // Update existing row
                            updateRowInTable(data.data);
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('saveCustomerBtn');
                    console.error('Error:', error);
                    showError('An error occurred while saving the customer.');
                }
            });
        }

        // Add new row to table
        function addRowToTable(customer) {
            const tbody = document.querySelector('#customersTable tbody');
            const statusBadge = customer.isActive ? 
                '<span class="badge bg-success">Active</span>' : 
                '<span class="badge bg-danger">Inactive</span>';
            
            const newRow = `
                <tr id="row-${customer.id}">
                    <td>${customer.id}</td>
                    <td>${customer.name}</td>
                    <td>${customer.email}</td>
                    <td>${customer.mobile}</td>
                    <td>${customer.address || ''}</td>
                    <td>${new Date(customer.createdAt).toLocaleDateString('en-GB')}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${customer.id})" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(${customer.id}, '${customer.name}')" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
            
            tbody.insertAdjacentHTML('afterbegin', newRow);
        }

        // Update existing row in table
        function updateRowInTable(customer) {
            const row = document.getElementById(`row-${customer.id}`);
            if (row) {
                const statusBadge = customer.isActive ? 
                    '<span class="badge bg-success">Active</span>' : 
                    '<span class="badge bg-danger">Inactive</span>';
                
                row.cells[1].textContent = customer.name;
                row.cells[2].textContent = customer.email;
                row.cells[3].textContent = customer.mobile;
                row.cells[4].textContent = customer.address || '';
                row.cells[6].innerHTML = statusBadge;
            }
        }

        // Open delete modal
        function openDeleteModal(id, name) {
            currentCustomerId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Delete customer
        function deleteCustomer() {
            showSpinner('confirmDeleteBtn');
            
            // Using jQuery AJAX
            $.ajax({
                url: `/Customers/DeleteCustomer/${currentCustomerId}`,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(currentCustomerId),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('confirmDeleteBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#deleteModal').modal('hide');
                        
                        // Remove row from table
                        const row = document.getElementById(`row-${currentCustomerId}`);
                        if (row) {
                            row.remove();
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('confirmDeleteBtn');
                    console.error('Error:', error);
                    showError('An error occurred while deleting the customer.');
                }
            });
        }

        // Initialize page
        $(document).ready(function() {
            // Setup CSRF token for all jQuery AJAX requests
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                        var token = $('input[name=__RequestVerificationToken]').val();
                        if (token) {
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        }
                    }
                }
            });
        });
    </script>
}
