@model IEnumerable<OrbitIMS.Data.Order>

@{
    ViewData["Title"] = "Orders Management";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Orders Management</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#orderModal" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add New Order
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="ordersTable">
                            <thead class="table-dark">
                                <tr>
                                    <th width="50">Toggle</th>
                                    <th>ID</th>
                                    <th>Order Date</th>
                                    <th>Customer</th>
                                    <th>Status</th>
                                    <th>Total Amount</th>
                                    <th>Items Count</th>
                                    <th>Created At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr id="row-@item.Id" class="order-row">
                                        <td>
                                            <button class="btn btn-sm btn-outline-secondary toggle-btn" 
                                                    data-bs-toggle="collapse" 
                                                    data-bs-target="#orderDetails-@item.Id" 
                                                    aria-expanded="false"
                                                    onclick="toggleOrderDetails(this, @item.Id)"
                                                    title="Show/Hide Order Details">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </td>
                                        <td>@item.Id</td>
                                        <td>@item.OrderDate.ToString("dd/MM/yyyy")</td>
                                        <td>@item.Customer?.Name</td>
                                        <td>
                                            @{
                                                string statusClass = item.Status switch
                                                {
                                                    OrbitIMS.Data.OrderStatus.Pending => "bg-warning",
                                                    OrbitIMS.Data.OrderStatus.Processing => "bg-info",
                                                    OrbitIMS.Data.OrderStatus.Shipped => "bg-primary",
                                                    OrbitIMS.Data.OrderStatus.delivered => "bg-success",
                                                    OrbitIMS.Data.OrderStatus.Cancelled => "bg-danger",
                                                    _ => "bg-secondary"
                                                };
                                            }
                                            <span class="badge @statusClass">@item.Status</span>
                                        </td>
                                        <td>$@item.TotalAmount.ToString("F2")</td>
                                        <td>@item.OrderDetails?.Count</td>
                                        <td>@item.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(@item.Id)" title="Edit Order">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(@item.Id, 'Order #@item.Id')" title="Delete Order">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    <tr class="collapse" id="orderDetails-@item.Id">
                                        <td colspan="9">
                                            <div class="p-3 bg-light">
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <h6 class="mb-0">Order Details</h6>
                                                    <button type="button" class="btn btn-sm btn-success" onclick="openCreateOrderDetailModal(@item.Id)">
                                                        <i class="fas fa-plus"></i> Add Item
                                                    </button>
                                                </div>
                                                @if (item.OrderDetails?.Any() == true)
                                                {
                                                    <div class="table-responsive">
                                                        <table class="table table-sm table-bordered mb-0">
                                                            <thead>
                                                                <tr class="table-light">
                                                                    <th>ID</th>
                                                                    <th>Product</th>
                                                                    <th>Quantity</th>
                                                                    <th>Unit Price</th>
                                                                    <th>Total Price</th>
                                                                    <th>Actions</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="orderDetailsBody-@item.Id">
                                                                @foreach (var detail in item.OrderDetails)
                                                                {
                                                                    <tr id="detail-row-@detail.Id">
                                                                        <td>@detail.Id</td>
                                                                        <td>@detail.Product?.Name</td>
                                                                        <td>@detail.Quantity</td>
                                                                        <td>$@detail.UnitPrice.ToString("F2")</td>
                                                                        <td>$@detail.TotalPrice.ToString("F2")</td>
                                                                        <td>
                                                                            <button type="button" class="btn btn-xs btn-outline-primary me-1" onclick="openEditOrderDetailModal(@detail.Id)" title="Edit Item">
                                                                                <i class="fas fa-edit"></i>
                                                                            </button>
                                                                            <button type="button" class="btn btn-xs btn-outline-danger" onclick="openDeleteOrderDetailModal(@detail.Id, '@detail.Product?.Name')" title="Delete Item">
                                                                                <i class="fas fa-trash"></i>
                                                                            </button>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="alert alert-info mb-0" id="noDetailsAlert-@item.Id">
                                                        <i class="fas fa-info-circle me-2"></i>
                                                        No order details available for this order.
                                                    </div>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Order Modal (Create/Edit) -->
<div class="modal fade" id="orderModal" tabindex="-1" aria-labelledby="orderModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderModalLabel">Add New Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="orderForm">
                    <input type="hidden" id="orderId" value="0" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="orderDate" class="form-label">Order Date <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="orderDate" name="OrderDate" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customerId" class="form-label">Customer <span class="text-danger">*</span></label>
                                <select class="form-select" id="customerId" name="CustomerId" required>
                                    <option value="">Select Customer</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="orderStatus" class="form-label">Status <span class="text-danger">*</span></label>
                                <select class="form-select" id="orderStatus" name="Status" required>
                                    <option value="1">Pending</option>
                                    <option value="2">Processing</option>
                                    <option value="3">Shipped</option>
                                    <option value="4">Delivered</option>
                                    <option value="5">Cancelled</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="totalAmount" class="form-label">Total Amount <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" min="0" class="form-control" id="totalAmount" name="TotalAmount" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveOrderBtn" onclick="saveOrder()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Order Detail Modal (Create/Edit) -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">Add Order Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="orderDetailForm">
                    <input type="hidden" id="orderDetailId" value="0" />
                    <input type="hidden" id="orderDetailOrderId" value="0" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="orderDetailOrderInfo" class="form-label">Order</label>
                                <input type="text" class="form-control" id="orderDetailOrderInfo" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="orderDetailProductId" class="form-label">Product <span class="text-danger">*</span></label>
                                <select class="form-select" id="orderDetailProductId" name="ProductId" required onchange="updatePriceFromProduct()">
                                    <option value="">Select Product</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="orderDetailQuantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                                <input type="number" min="1" class="form-control" id="orderDetailQuantity" name="Quantity" required onchange="calculateTotal()">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="orderDetailUnitPrice" class="form-label">Unit Price <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" min="0" class="form-control" id="orderDetailUnitPrice" name="UnitPrice" required onchange="calculateTotal()">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="orderDetailTotalPrice" class="form-label">Total Price</label>
                                <input type="number" step="0.01" class="form-control" id="orderDetailTotalPrice" name="TotalPrice" readonly>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveOrderDetailBtn" onclick="saveOrderDetail()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Item
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Order Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone and will also delete all related order details.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="deleteOrder()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Order Detail Confirmation Modal -->
<div class="modal fade" id="deleteOrderDetailModal" tabindex="-1" aria-labelledby="deleteOrderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteOrderDetailModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="deleteOrderDetailItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteOrderDetailBtn" onclick="deleteOrderDetail()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentOrderId = 0;
        let currentOrderDetailId = 0;
        let customersData = [];
        let productsData = [];

        // Show loading spinner
        function showSpinner(buttonId) {
            const button = document.getElementById(buttonId);
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.remove('d-none');
            button.disabled = true;
        }

        // Hide loading spinner
        function hideSpinner(buttonId) {
            const button = document.getElementById(buttonId);
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.add('d-none');
            button.disabled = false;
        }

        // Clear form validation
        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        // Toggle order details with +/- icons
        function toggleOrderDetails(button, orderId) {
            const icon = button.querySelector('i');
            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            
            // Toggle icon
            if (isExpanded) {
                icon.classList.remove('fa-minus');
                icon.classList.add('fa-plus');
            } else {
                icon.classList.remove('fa-plus');
                icon.classList.add('fa-minus');
            }
        }

        // Load customers for dropdown
        function loadCustomers() {
            return $.ajax({
                url: '/Orders/GetCustomers',
                type: 'GET',
                dataType: 'json'
            });
        }

        // Load products for dropdown
        function loadProducts() {
            return $.ajax({
                url: '/OrderDetails/GetDropdownData',
                type: 'GET',
                dataType: 'json'
            });
        }

        // Populate customers dropdown
        function populateCustomersDropdown(customers) {
            customersData = customers;
            const customerSelect = document.getElementById('customerId');
            customerSelect.innerHTML = '<option value="">Select Customer</option>';
            customers.forEach(customer => {
                customerSelect.innerHTML += `<option value="${customer.id}">${customer.name}</option>`;
            });
        }

        // Populate products dropdown
        function populateProductsDropdown(products) {
            productsData = products;
            const productSelect = document.getElementById('orderDetailProductId');
            productSelect.innerHTML = '<option value="">Select Product</option>';
            products.forEach(product => {
                productSelect.innerHTML += `<option value="${product.id}" data-price="${product.price}">${product.name}</option>`;
            });
        }

        // Update price from selected product
        function updatePriceFromProduct() {
            const productSelect = document.getElementById('orderDetailProductId');
            const selectedOption = productSelect.options[productSelect.selectedIndex];
            const price = selectedOption.getAttribute('data-price');
            
            if (price) {
                document.getElementById('orderDetailUnitPrice').value = parseFloat(price).toFixed(2);
                calculateTotal();
            }
        }

        // Calculate total price
        function calculateTotal() {
            const quantity = parseFloat(document.getElementById('orderDetailQuantity').value) || 0;
            const unitPrice = parseFloat(document.getElementById('orderDetailUnitPrice').value) || 0;
            const totalPrice = quantity * unitPrice;
            
            document.getElementById('orderDetailTotalPrice').value = totalPrice.toFixed(2);
        }

        // Get customer name by ID
        function getCustomerName(customerId) {
            const customer = customersData.find(c => c.id === customerId);
            return customer ? customer.name : '';
        }

        // Get product name by ID
        function getProductName(productId) {
            const product = productsData.find(p => p.id === productId);
            return product ? product.name : '';
        }

        // Get status class
        function getStatusClass(status) {
            switch (status) {
                case 1: return 'bg-warning';
                case 2: return 'bg-info';
                case 3: return 'bg-primary';
                case 4: return 'bg-success';
                case 5: return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        // Get status text
        function getStatusText(status) {
            switch (status) {
                case 1: return 'Pending';
                case 2: return 'Processing';
                case 3: return 'Shipped';
                case 4: return 'Delivered';
                case 5: return 'Cancelled';
                default: return 'Unknown';
            }
        }

        // ============ ORDER OPERATIONS ============

        // Open create order modal
        function openCreateModal() {
            document.getElementById('orderModalLabel').textContent = 'Add New Order';
            document.getElementById('orderForm').reset();
            document.getElementById('orderId').value = '0';
            
            // Set today's date as default
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('orderDate').value = today;
            
            currentOrderId = 0;
            clearValidation();

            // Load customers
            loadCustomers().done(function(data) {
                if (data.success) {
                    populateCustomersDropdown(data.data);
                } else {
                    showError(data.message);
                }
            }).fail(function() {
                showError('Error loading customers');
            });
        }

        // Open edit order modal
        function openEditModal(id) {
            currentOrderId = id;
            document.getElementById('orderModalLabel').textContent = 'Edit Order';
            
            // Load customers first, then order data
            loadCustomers().done(function(customerData) {
                if (customerData.success) {
                    populateCustomersDropdown(customerData.data);
                    
                    // Now load order data
                    $.ajax({
                        url: `/Orders/GetOrder/${id}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(data) {
                            if (data.success) {
                                const order = data.data;
                                document.getElementById('orderId').value = order.id;
                                document.getElementById('orderDate').value = order.orderDate.split('T')[0];
                                document.getElementById('customerId').value = order.customerId;
                                document.getElementById('orderStatus').value = order.status;
                                document.getElementById('totalAmount').value = order.totalAmount;
                                clearValidation();
                                
                                // Show modal
                                const modal = new bootstrap.Modal(document.getElementById('orderModal'));
                                modal.show();
                            } else {
                                showError(data.message);
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Error:', error);
                            showError('Error loading order data');
                        }
                    });
                } else {
                    showError(customerData.message);
                }
            }).fail(function() {
                showError('Error loading customers');
            });
        }

        // Save order (create or update)
        function saveOrder() {
            const orderData = {
                Id: parseInt(document.getElementById('orderId').value),
                OrderDate: document.getElementById('orderDate').value,
                CustomerId: parseInt(document.getElementById('customerId').value),
                Status: parseInt(document.getElementById('orderStatus').value),
                TotalAmount: parseFloat(document.getElementById('totalAmount').value)
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            // Validate Order Date
            if (!orderData.OrderDate) {
                document.getElementById('orderDate').classList.add('is-invalid');
                document.querySelector('#orderDate + .invalid-feedback').textContent = 'Order date is required.';
                isValid = false;
            }

            // Validate Customer
            if (isNaN(orderData.CustomerId) || orderData.CustomerId <= 0) {
                document.getElementById('customerId').classList.add('is-invalid');
                document.querySelector('#customerId + .invalid-feedback').textContent = 'Please select a customer.';
                isValid = false;
            }

            // Validate Total Amount
            if (isNaN(orderData.TotalAmount) || orderData.TotalAmount < 0) {
                document.getElementById('totalAmount').classList.add('is-invalid');
                document.querySelector('#totalAmount + .invalid-feedback').textContent = 'Please enter a valid total amount.';
                isValid = false;
            }

            if (!isValid) return;

            showSpinner('saveOrderBtn');

            const url = orderData.Id === 0 ? '/Orders/CreateOrder' : '/Orders/UpdateOrder';
            
            // Using jQuery AJAX
            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(orderData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('saveOrderBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#orderModal').modal('hide');
                        
                        if (orderData.Id === 0) {
                            // Add new row to table
                            addOrderRowToTable(data.data);
                        } else {
                            // Update existing row
                            updateOrderRowInTable(data.data);
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('saveOrderBtn');
                    console.error('Error:', error);
                    showError('An error occurred while saving the order.');
                }
            });
        }

        // Add new order row to table
        function addOrderRowToTable(order) {
            const tbody = document.querySelector('#ordersTable tbody');
            const statusClass = getStatusClass(order.status);
            const statusText = getStatusText(order.status);
            
            const newRow = `
                <tr id="row-${order.id}" class="order-row">
                    <td>
                        <button class="btn btn-sm btn-outline-secondary toggle-btn" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#orderDetails-${order.id}" 
                                aria-expanded="false"
                                onclick="toggleOrderDetails(this, ${order.id})"
                                title="Show/Hide Order Details">
                            <i class="fas fa-plus"></i>
                        </button>
                    </td>
                    <td>${order.id}</td>
                    <td>${new Date(order.orderDate).toLocaleDateString('en-GB')}</td>
                    <td>${order.customer ? order.customer.name : getCustomerName(order.customerId)}</td>
                    <td><span class="badge ${statusClass}">${statusText}</span></td>
                    <td>$${order.totalAmount.toFixed(2)}</td>
                    <td>0</td>
                    <td>${new Date(order.createdAt).toLocaleDateString('en-GB')}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${order.id})" title="Edit Order">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(${order.id}, 'Order #${order.id}')" title="Delete Order">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
                <tr class="collapse" id="orderDetails-${order.id}">
                    <td colspan="9">
                        <div class="p-3 bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Order Details</h6>
                                <button type="button" class="btn btn-sm btn-success" onclick="openCreateOrderDetailModal(${order.id})">
                                    <i class="fas fa-plus"></i> Add Item
                                </button>
                            </div>
                            <div class="alert alert-info mb-0" id="noDetailsAlert-${order.id}">
                                <i class="fas fa-info-circle me-2"></i>
                                No order details available for this order.
                            </div>
                        </div>
                    </td>
                </tr>`;
            
            tbody.insertAdjacentHTML('afterbegin', newRow);
        }

        // Update existing order row in table
        function updateOrderRowInTable(order) {
            const row = document.getElementById(`row-${order.id}`);
            if (row) {
                const statusClass = getStatusClass(order.status);
                const statusText = getStatusText(order.status);
                
                row.cells[2].textContent = new Date(order.orderDate).toLocaleDateString('en-GB');
                row.cells[3].textContent = order.customer ? order.customer.name : getCustomerName(order.customerId);
                row.cells[4].innerHTML = `<span class="badge ${statusClass}">${statusText}</span>`;
                row.cells[5].textContent = `$${order.totalAmount.toFixed(2)}`;
            }
        }

        // Open delete order modal
        function openDeleteModal(id, name) {
            currentOrderId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Delete order
        function deleteOrder() {
            showSpinner('confirmDeleteBtn');
            
            // Using jQuery AJAX
            $.ajax({
                url: '/Orders/DeleteOrder',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(currentOrderId),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('confirmDeleteBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#deleteModal').modal('hide');
                        
                        // Remove both order row and details row
                        const orderRow = document.getElementById(`row-${currentOrderId}`);
                        const detailsRow = document.getElementById(`orderDetails-${currentOrderId}`);
                        if (orderRow) orderRow.remove();
                        if (detailsRow) detailsRow.remove();
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('confirmDeleteBtn');
                    console.error('Error:', error);
                    showError('An error occurred while deleting the order.');
                }
            });
        }

        // ============ ORDER DETAIL OPERATIONS ============

        // Open create order detail modal
        function openCreateOrderDetailModal(orderId) {
            currentOrderId = orderId;
            document.getElementById('orderDetailModalLabel').textContent = 'Add Order Item';
            document.getElementById('orderDetailForm').reset();
            document.getElementById('orderDetailId').value = '0';
            document.getElementById('orderDetailOrderId').value = orderId;
            document.getElementById('orderDetailOrderInfo').value = `Order #${orderId}`;
            document.getElementById('orderDetailTotalPrice').value = '0.00';
            currentOrderDetailId = 0;
            clearValidation();

            // Load products
            loadProducts().done(function(data) {
                if (data.success) {
                    populateProductsDropdown(data.data.products);
                } else {
                    showError(data.message);
                }
            }).fail(function() {
                showError('Error loading products');
            });

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
            modal.show();
        }

        // Open edit order detail modal
        function openEditOrderDetailModal(id) {
            currentOrderDetailId = id;
            document.getElementById('orderDetailModalLabel').textContent = 'Edit Order Item';
            
            // Load products first, then order detail data
            loadProducts().done(function(dropdownData) {
                if (dropdownData.success) {
                    populateProductsDropdown(dropdownData.data.products);
                    
                    // Now load order detail data
                    $.ajax({
                        url: `/OrderDetails/GetOrderDetail/${id}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(data) {
                            if (data.success) {
                                const orderDetail = data.data;
                                document.getElementById('orderDetailId').value = orderDetail.id;
                                document.getElementById('orderDetailOrderId').value = orderDetail.orderId;
                                document.getElementById('orderDetailOrderInfo').value = `Order #${orderDetail.orderId}`;
                                document.getElementById('orderDetailProductId').value = orderDetail.productId;
                                document.getElementById('orderDetailQuantity').value = orderDetail.quantity;
                                document.getElementById('orderDetailUnitPrice').value = orderDetail.unitPrice.toFixed(2);
                                document.getElementById('orderDetailTotalPrice').value = orderDetail.totalPrice.toFixed(2);
                                clearValidation();
                                
                                // Show modal
                                const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
                                modal.show();
                            } else {
                                showError(data.message);
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Error:', error);
                            showError('Error loading order detail data');
                        }
                    });
                } else {
                    showError(dropdownData.message);
                }
            }).fail(function() {
                showError('Error loading products');
            });
        }

        // Save order detail (create or update)
        function saveOrderDetail() {
            const orderDetailData = {
                Id: parseInt(document.getElementById('orderDetailId').value),
                OrderId: parseInt(document.getElementById('orderDetailOrderId').value),
                ProductId: parseInt(document.getElementById('orderDetailProductId').value),
                Quantity: parseInt(document.getElementById('orderDetailQuantity').value),
                UnitPrice: parseFloat(document.getElementById('orderDetailUnitPrice').value)
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            // Validate Product
            if (isNaN(orderDetailData.ProductId) || orderDetailData.ProductId <= 0) {
                document.getElementById('orderDetailProductId').classList.add('is-invalid');
                document.querySelector('#orderDetailProductId + .invalid-feedback').textContent = 'Please select a product.';
                isValid = false;
            }

            // Validate Quantity
            if (isNaN(orderDetailData.Quantity) || orderDetailData.Quantity <= 0) {
                document.getElementById('orderDetailQuantity').classList.add('is-invalid');
                document.querySelector('#orderDetailQuantity + .invalid-feedback').textContent = 'Please enter a valid quantity greater than 0.';
                isValid = false;
            }

            // Validate Unit Price
            if (isNaN(orderDetailData.UnitPrice) || orderDetailData.UnitPrice <= 0) {
                document.getElementById('orderDetailUnitPrice').classList.add('is-invalid');
                document.querySelector('#orderDetailUnitPrice + .invalid-feedback').textContent = 'Please enter a valid unit price greater than 0.';
                isValid = false;
            }

            if (!isValid) return;

            showSpinner('saveOrderDetailBtn');

            const url = orderDetailData.Id === 0 ? '/OrderDetails/CreateOrderDetail' : '/OrderDetails/UpdateOrderDetail';
            
            // Using jQuery AJAX
            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(orderDetailData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('saveOrderDetailBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#orderDetailModal').modal('hide');
                        
                        if (orderDetailData.Id === 0) {
                            // Add new row to order details table
                            addOrderDetailRowToTable(data.data, orderDetailData.OrderId);
                        } else {
                            // Update existing row
                            updateOrderDetailRowInTable(data.data);
                        }
                        
                        // Update items count in main table
                        updateOrderItemsCount(orderDetailData.OrderId);
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('saveOrderDetailBtn');
                    console.error('Error:', error);
                    showError('An error occurred while saving the order detail.');
                }
            });
        }

        // Add new order detail row
        function addOrderDetailRowToTable(orderDetail, orderId) {
            let tbody = document.getElementById(`orderDetailsBody-${orderId}`);
            
            // If no tbody exists, create the table structure
            if (!tbody) {
                const noDetailsAlert = document.getElementById(`noDetailsAlert-${orderId}`);
                if (noDetailsAlert) {
                    const tableHtml =`
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered mb-0">
                                <thead>
                                    <tr class="table-light">
                                        <th>ID</th>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Total Price</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="orderDetailsBody-${orderId}">
                                </tbody>
                            </table>
                        </div>`;
                    noDetailsAlert.outerHTML = tableHtml;
                    tbody = document.getElementById(`orderDetailsBody-${orderId}`);
                }
            }
            
            const productName = orderDetail.product ? orderDetail.product.name : getProductName(orderDetail.productId);
            
            const newRow = `
                <tr id="detail-row-${orderDetail.id}">
                    <td>${orderDetail.id}</td>
                    <td>${productName}</td>
                    <td>${orderDetail.quantity}</td>
                    <td>$${orderDetail.unitPrice.toFixed(2)}</td>
                    <td>$${orderDetail.totalPrice.toFixed(2)}</td>
                    <td>
                        <button type="button" class="btn btn-xs btn-outline-primary me-1" onclick="openEditOrderDetailModal(${orderDetail.id})" title="Edit Item">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-xs btn-outline-danger" onclick="openDeleteOrderDetailModal(${orderDetail.id}, '${productName}')" title="Delete Item">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
            
            tbody.insertAdjacentHTML('afterbegin', newRow);
        }

        // Update existing order detail row
        function updateOrderDetailRowInTable(orderDetail) {
            const row = document.getElementById(`detail-row-${orderDetail.id}`);
            if (row) {
                const productName = orderDetail.product ? orderDetail.product.name : getProductName(orderDetail.productId);
                
                row.cells[1].textContent = productName;
                row.cells[2].textContent = orderDetail.quantity;
                row.cells[3].textContent = `$${orderDetail.unitPrice.toFixed(2)}`;
                row.cells[4].textContent = `$${orderDetail.totalPrice.toFixed(2)}`;
            }
        }

        // Update order items count
        function updateOrderItemsCount(orderId) {
            const orderRow = document.getElementById(`row-${orderId}`);
            if (orderRow) {
                const tbody = document.getElementById(`orderDetailsBody-${orderId}`);
                const count = tbody ? tbody.children.length : 0;
                orderRow.cells[6].textContent = count;
            }
        }

        // Open delete order detail modal
        function openDeleteOrderDetailModal(id, name) {
            currentOrderDetailId = id;
            document.getElementById('deleteOrderDetailItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteOrderDetailModal'));
            modal.show();
        }

        // Delete order detail
        function deleteOrderDetail() {
            showSpinner('confirmDeleteOrderDetailBtn');
            
            // Using jQuery AJAX
            $.ajax({
                url: '/OrderDetails/DeleteOrderDetail',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(currentOrderDetailId),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('confirmDeleteOrderDetailBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#deleteOrderDetailModal').modal('hide');
                        
                        // Remove row from table
                        const row = document.getElementById(`detail-row-${currentOrderDetailId}`);
                        if (row) {
                            const orderId = parseInt(row.closest('[id^="orderDetails-"]').id.split('-')[1]);
                            row.remove();
                            
                            // Update items count
                            updateOrderItemsCount(orderId);
                            
                            // Check if table is now empty
                            const tbody = document.getElementById(`orderDetailsBody-${orderId}`);
                            if (tbody && tbody.children.length === 0) {
                                // Replace table with no details alert
                                const tableDiv = tbody.closest('.table-responsive');
                                if (tableDiv) {
                                    tableDiv.outerHTML = `
                                        <div class="alert alert-info mb-0" id="noDetailsAlert-${orderId}">
                                            <i class="fas fa-info-circle me-2"></i>
                                            No order details available for this order.
                                        </div>`;
                                }
                            }
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('confirmDeleteOrderDetailBtn');
                    console.error('Error:', error);
                    showError('An error occurred while deleting the order detail.');
                }
            });
        }

        // Initialize page
        $(document).ready(function() {
            // Setup CSRF token for all jQuery AJAX requests
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                        var token = $('input[name=__RequestVerificationToken]').val();
                        if (token) {
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        }
                    }
                }
            });

            // Handle collapse events for icon toggling
            document.addEventListener('shown.bs.collapse', function (e) {
                if (e.target.id.startsWith('orderDetails-')) {
                    const button = document.querySelector(`[data-bs-target="#${e.target.id}"]`);
                    const icon = button.querySelector('i');
                    icon.classList.remove('fa-plus');
                    icon.classList.add('fa-minus');
                }
            });

            document.addEventListener('hidden.bs.collapse', function (e) {
                if (e.target.id.startsWith('orderDetails-')) {
                    const button = document.querySelector(`[data-bs-target="#${e.target.id}"]`);
                    const icon = button.querySelector('i');
                    icon.classList.remove('fa-minus');
                    icon.classList.add('fa-plus');
                }
            });
        });
    </script>

    <style>
        .btn-xs {
            padding: 0.25rem 0.4rem;
            font-size: 0.75rem;
            line-height: 1.35;
        }
        
        .order-row:hover {
            background-color: rgba(0,0,0,.075);
        }
        
        .collapse .table-responsive {
            margin-bottom: 0;
        }
        
        .toggle-btn {
            border: none;
            background: transparent;
        }
        
        .toggle-btn:hover {
            background-color: rgba(0,0,0,.075);
        }
    </style>
}