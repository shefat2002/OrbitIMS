@model IEnumerable<OrbitIMS.Data.OrderDetails>

@{
    ViewData["Title"] = "Order Details";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Order Details</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#orderDetailModal" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add New Order Detail
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="orderDetailsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Order</th>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Unit Price</th>
                                    <th>Total Price</th>
                                    <th>Created At</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr id="row-@item.Id">
                                        <td>@item.Id</td>
                                        <td>
                                            @if (item.Order?.Customer != null)
                                            {
                                                <span>Order #@item.Order.Id - @item.Order.Customer.Name</span>
                                            }
                                            else
                                            {
                                                <span>Order #@item.Order?.Id</span>
                                            }
                                        </td>
                                        <td>@item.Product?.Name</td>
                                        <td>@item.Quantity</td>
                                        <td>$@item.UnitPrice.ToString("F2")</td>
                                        <td>$@item.TotalPrice.ToString("F2")</td>
                                        <td>@item.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(@item.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(@item.Id, '@item.Product?.Name - Order #@item.Order?.Id')" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Order Detail Modal (Create/Edit) -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">Add New Order Detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="orderDetailForm">
                    <input type="hidden" id="orderDetailId" value="0" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="orderDetailOrderId" class="form-label">Order <span class="text-danger">*</span></label>
                                <select class="form-select" id="orderDetailOrderId" name="OrderId" required>
                                    <option value="">Select Order</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="orderDetailProductId" class="form-label">Product <span class="text-danger">*</span></label>
                                <select class="form-select" id="orderDetailProductId" name="ProductId" required onchange="updatePriceFromProduct()">
                                    <option value="">Select Product</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="orderDetailQuantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                                <input type="number" min="1" class="form-control" id="orderDetailQuantity" name="Quantity" required onchange="calculateTotal()">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="orderDetailUnitPrice" class="form-label">Unit Price <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" min="0" class="form-control" id="orderDetailUnitPrice" name="UnitPrice" required onchange="calculateTotal()">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="orderDetailTotalPrice" class="form-label">Total Price</label>
                                <input type="number" step="0.01" class="form-control" id="orderDetailTotalPrice" name="TotalPrice" readonly>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveOrderDetailBtn" onclick="saveOrderDetail()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Order Detail
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="deleteOrderDetail()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentOrderDetailId = 0;
        let ordersData = [];
        let productsData = [];


        // Clear form validation
        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        // Load dropdown data (orders and products)
        function loadDropdownData() {
            return $.ajax({
                url: '/OrderDetails/GetDropdownData',
                type: 'GET',
                dataType: 'json'
            });
        }

        // Populate dropdowns
        function populateDropdowns(orders, products) {
            ordersData = orders;
            productsData = products;

            // Populate order dropdown
            const orderSelect = document.getElementById('orderDetailOrderId');
            orderSelect.innerHTML = '<option value="">Select Order</option>';
            orders.forEach(order => {
                orderSelect.innerHTML += `<option value="${order.id}">${order.displayText}</option>`;
            });

            // Populate product dropdown
            const productSelect = document.getElementById('orderDetailProductId');
            productSelect.innerHTML = '<option value="">Select Product</option>';
            products.forEach(product => {
                productSelect.innerHTML += `<option value="${product.id}" data-price="${product.price}">${product.name}</option>`;
            });
        }

        // Update price from selected product
        function updatePriceFromProduct() {
            const productSelect = document.getElementById('orderDetailProductId');
            const selectedOption = productSelect.options[productSelect.selectedIndex];
            const price = selectedOption.getAttribute('data-price');
            
            if (price) {
                document.getElementById('orderDetailUnitPrice').value = parseFloat(price).toFixed(2);
                calculateTotal();
            }
        }

        // Calculate total price
        function calculateTotal() {
            const quantity = parseFloat(document.getElementById('orderDetailQuantity').value) || 0;
            const unitPrice = parseFloat(document.getElementById('orderDetailUnitPrice').value) || 0;
            const totalPrice = quantity * unitPrice;
            
            document.getElementById('orderDetailTotalPrice').value = totalPrice.toFixed(2);
        }

        // Get order display text by ID
        function getOrderDisplayText(orderId) {
            const order = ordersData.find(o => o.id === orderId);
            return order ? order.displayText : `Order #${orderId}`;
        }

        // Get product name by ID
        function getProductName(productId) {
            const product = productsData.find(p => p.id === productId);
            return product ? product.name : '';
        }

        // Open create modal
        function openCreateModal() {
            document.getElementById('orderDetailModalLabel').textContent = 'Add New Order Detail';
            document.getElementById('orderDetailForm').reset();
            document.getElementById('orderDetailId').value = '0';
            document.getElementById('orderDetailTotalPrice').value = '0.00';
            currentOrderDetailId = 0;
            clearValidation();

            // Load dropdown data
            loadDropdownData().done(function(data) {
                if (data.success) {
                    populateDropdowns(data.data.orders, data.data.products);
                } else {
                    showError(data.message);
                }
            }).fail(function() {
                showError('Error loading dropdown data');
            });
        }

        // Open edit modal
        function openEditModal(id) {
            currentOrderDetailId = id;
            document.getElementById('orderDetailModalLabel').textContent = 'Edit Order Detail';
            
            // Load dropdown data first, then order detail data
            loadDropdownData().done(function(dropdownData) {
                if (dropdownData.success) {
                    populateDropdowns(dropdownData.data.orders, dropdownData.data.products);
                    
                    // Now load order detail data
                    $.ajax({
                        url: `/OrderDetails/GetOrderDetail/${id}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(data) {
                            if (data.success) {
                                const orderDetail = data.data;
                                document.getElementById('orderDetailId').value = orderDetail.id;
                                document.getElementById('orderDetailOrderId').value = orderDetail.orderId;
                                document.getElementById('orderDetailProductId').value = orderDetail.productId;
                                document.getElementById('orderDetailQuantity').value = orderDetail.quantity;
                                document.getElementById('orderDetailUnitPrice').value = orderDetail.unitPrice.toFixed(2);
                                document.getElementById('orderDetailTotalPrice').value = orderDetail.totalPrice.toFixed(2);
                                clearValidation();
                                
                                // Show modal
                                const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
                                modal.show();
                            } else {
                                showError(data.message);
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Error:', error);
                            showError('Error loading order detail data');
                        }
                    });
                } else {
                    showError(dropdownData.message);
                }
            }).fail(function() {
                showError('Error loading dropdown data');
            });
        }

        // Save order detail (create or update)
        function saveOrderDetail() {
            const orderDetailData = {
                Id: parseInt(document.getElementById('orderDetailId').value),
                OrderId: parseInt(document.getElementById('orderDetailOrderId').value),
                ProductId: parseInt(document.getElementById('orderDetailProductId').value),
                Quantity: parseInt(document.getElementById('orderDetailQuantity').value),
                UnitPrice: parseFloat(document.getElementById('orderDetailUnitPrice').value)
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            // Validate Order
            if (isNaN(orderDetailData.OrderId) || orderDetailData.OrderId <= 0) {
                document.getElementById('orderDetailOrderId').classList.add('is-invalid');
                document.querySelector('#orderDetailOrderId + .invalid-feedback').textContent = 'Please select an order.';
                isValid = false;
            }

            // Validate Product
            if (isNaN(orderDetailData.ProductId) || orderDetailData.ProductId <= 0) {
                document.getElementById('orderDetailProductId').classList.add('is-invalid');
                document.querySelector('#orderDetailProductId + .invalid-feedback').textContent = 'Please select a product.';
                isValid = false;
            }

            // Validate Quantity
            if (isNaN(orderDetailData.Quantity) || orderDetailData.Quantity <= 0) {
                document.getElementById('orderDetailQuantity').classList.add('is-invalid');
                document.querySelector('#orderDetailQuantity + .invalid-feedback').textContent = 'Please enter a valid quantity greater than 0.';
                isValid = false;
            }

            // Validate Unit Price
            if (isNaN(orderDetailData.UnitPrice) || orderDetailData.UnitPrice <= 0) {
                document.getElementById('orderDetailUnitPrice').classList.add('is-invalid');
                document.querySelector('#orderDetailUnitPrice + .invalid-feedback').textContent = 'Please enter a valid unit price greater than 0.';
                isValid = false;
            }

            if (!isValid) return;

            showSpinner('saveOrderDetailBtn');

            const url = orderDetailData.Id === 0 ? '/OrderDetails/CreateOrderDetail' : '/OrderDetails/UpdateOrderDetail';
            
            // Using jQuery AJAX
            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(orderDetailData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('saveOrderDetailBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#orderDetailModal').modal('hide');
                        
                        if (orderDetailData.Id === 0) {
                            // Add new row to table
                            addRowToTable(data.data);
                        } else {
                            // Update existing row
                            updateRowInTable(data.data);
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('saveOrderDetailBtn');
                    console.error('Error:', error);
                    showError('An error occurred while saving the order detail.');
                }
            });
        }

        // Add new row to table
        function addRowToTable(orderDetail) {
            const tbody = document.querySelector('#orderDetailsTable tbody');
            const statusBadge = orderDetail.isActive ? 
                '<span class="badge bg-success">Active</span>' : 
                '<span class="badge bg-danger">Inactive</span>';
            
            let orderText = '';
            if (orderDetail.order && orderDetail.order.customer) {
                orderText = `Order #${orderDetail.order.id} - ${orderDetail.order.customer.name}`;
            } else {
                orderText = getOrderDisplayText(orderDetail.orderId);
            }
            
            const productName = orderDetail.product ? orderDetail.product.name : getProductName(orderDetail.productId);
            
            const newRow = `
                <tr id="row-${orderDetail.id}">
                    <td>${orderDetail.id}</td>
                    <td>${orderText}</td>
                    <td>${productName}</td>
                    <td>${orderDetail.quantity}</td>
                    <td>$${orderDetail.unitPrice.toFixed(2)}</td>
                    <td>$${orderDetail.totalPrice.toFixed(2)}</td>
                    <td>${new Date(orderDetail.createdAt).toLocaleDateString('en-GB')}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${orderDetail.id})" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(${orderDetail.id}, '${productName} - ${orderText}')" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
            
            tbody.insertAdjacentHTML('afterbegin', newRow);
        }

        // Update existing row in table
        function updateRowInTable(orderDetail) {
            const row = document.getElementById(`row-${orderDetail.id}`);
            if (row) {
                const statusBadge = orderDetail.isActive ? 
                    '<span class="badge bg-success">Active</span>' : 
                    '<span class="badge bg-danger">Inactive</span>';
                
                let orderText = '';
                if (orderDetail.order && orderDetail.order.customer) {
                    orderText = `Order #${orderDetail.order.id} - ${orderDetail.order.customer.name}`;
                } else {
                    orderText = getOrderDisplayText(orderDetail.orderId);
                }
                
                const productName = orderDetail.product ? orderDetail.product.name : getProductName(orderDetail.productId);
                
                row.cells[1].textContent = orderText;
                row.cells[2].textContent = productName;
                row.cells[3].textContent = orderDetail.quantity;
                row.cells[4].textContent = `$${orderDetail.unitPrice.toFixed(2)}`;
                row.cells[5].textContent = `$${orderDetail.totalPrice.toFixed(2)}`;
                row.cells[7].innerHTML = statusBadge;
            }
        }

        // Open delete modal
        function openDeleteModal(id, name) {
            currentOrderDetailId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Delete order detail
        function deleteOrderDetail() {
            showSpinner('confirmDeleteBtn');
            
            // Using jQuery AJAX
            $.ajax({
                url: '/OrderDetails/DeleteOrderDetail',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(currentOrderDetailId),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('confirmDeleteBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#deleteModal').modal('hide');
                        
                        // Remove row from table
                        const row = document.getElementById(`row-${currentOrderDetailId}`);
                        if (row) {
                            row.remove();
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('confirmDeleteBtn');
                    console.error('Error:', error);
                    showError('An error occurred while deleting the order detail.');
                }
            });
        }

        // Initialize page
        $(document).ready(function() {
            // Setup CSRF token for all jQuery AJAX requests
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                        var token = $('input[name=__RequestVerificationToken]').val();
                        if (token) {
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        }
                    }
                }
            });
        });
    </script>
}
