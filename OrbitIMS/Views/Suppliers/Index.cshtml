@model IEnumerable<OrbitIMS.Data.Supplier>

@{
    ViewData["Title"] = "Suppliers";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Suppliers</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#supplierModal" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="suppliersTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Mobile</th>
                                    <th>Address</th>
                                    <th>Created At</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr id="row-@item.Id">
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>@item.Email</td>
                                        <td>@item.Mobile</td>
                                        <td>@item.Address</td>
                                        <td>@item.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        @* <td>@item.CreatedBy</td> *@
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(@item.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(@item.Id, '@item.Name')" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Supplier Modal (Create/Edit) -->
<div class="modal fade" id="supplierModal" tabindex="-1" aria-labelledby="supplierModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="supplierModalLabel">Add New Supplier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="supplierForm">
                    <input type="hidden" id="supplierId" value="0" />
                    <div class="mb-3">
                        <label for="supplierName" class="form-label">Supplier Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="supplierName" name="Name" required maxlength="100">
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="mb-3">
                        <label for="supplierEmail" class="form-label">Email <span class="text-danger">*</span></label>
                        <input type="email" class="form-control" id="supplierEmail" name="Email" required maxlength="100">
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="mb-3">
                        <label for="supplierMobile" class="form-label">Mobile <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="supplierMobile" name="Mobile" required maxlength="15">
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="mb-3">
                        <label for="supplierAddress" class="form-label">Address</label>
                        <textarea class="form-control" id="supplierAddress" name="Address" rows="3" maxlength="500"></textarea>
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSupplierBtn" onclick="saveSupplier()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Supplier
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the supplier <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="deleteSupplier()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentSupplierId = 0;

        // Clear form validation
        function clearValidation() {
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').text('');
        }

        // Open create modal
        function openCreateModal() {
            $('#supplierModalLabel').text('Add New Supplier');
            $('#supplierForm')[0].reset();
            $('#supplierId').val('0');
            currentSupplierId = 0;
            clearValidation();
        }

        // Open edit modal
        function openEditModal(id) {
            currentSupplierId = id;
            $('#supplierModalLabel').text('Edit Supplier');

            // Get supplier data
            $.ajax({
                url: `/Suppliers/GetSupplier/${id}`,
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (data.success) {
                        $('#supplierId').val(data.data.id);
                        $('#supplierName').val(data.data.name);
                        $('#supplierEmail').val(data.data.email);
                        $('#supplierMobile').val(data.data.mobile);
                        $('#supplierAddress').val(data.data.address);
                        clearValidation();

                        // Show modal
                        $('#supplierModal').modal('show');
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    showError('Error loading supplier data');
                }
            });
        }

        // Save supplier (create or update)
        function saveSupplier() {
            const supplierData = {
                Id: parseInt($('#supplierId').val()),
                Name: $('#supplierName').val(),
                Email: $('#supplierEmail').val(),
                Mobile: $('#supplierMobile').val(),
                Address: $('#supplierAddress').val()
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            if (!supplierData.Name || supplierData.Name.trim() === '') {
                $('#supplierName').addClass('is-invalid');
                $('#supplierName').next('.invalid-feedback').text('Supplier name is required.');
                isValid = false;
            }
            


            if (!isValid) return;

            showSpinner('saveSupplierBtn');

            const url = supplierData.Id === 0 ? '/Suppliers/CreateSupplier' : '/Suppliers/UpdateSupplier';

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(supplierData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(data) {
                    hideSpinner('saveSupplierBtn');

                    if (data.success) {
                        showSuccess(data.message);
                        $('#supplierModal').modal('hide');

                        if (supplierData.Id === 0) {
                            // Add new row to table
                            addRowToTable(data.data);
                        } else {
                            // Update existing row
                            updateRowInTable(data.data);
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('saveSupplierBtn');
                    console.error('Error:', error);
                    showError('An error occurred while saving the supplier.');
                }
            });
        }

        // Add new row to table
        function addRowToTable(supplier) {
            const statusBadge = supplier.isActive ?
                '<span class="badge bg-success">Active</span>' :
                '<span class="badge bg-danger">Inactive</span>';

            const newRow = `
                <tr id="row-${supplier.id}">
                    <td>${supplier.id}</td>
                    <td>${supplier.name}</td>
                    <td>${supplier.email}</td>
                    <td>${supplier.mobile}</td>
                    <td>${supplier.address}</td>
                    <td>${new Date(supplier.createdAt).toLocaleDateString('en-GB')}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${supplier.id})" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(${supplier.id}, '${supplier.name}')" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;

            $('#suppliersTable tbody').prepend(newRow);
        }

        // Update existing row in table
        function updateRowInTable(supplier) {
            const $row = $(`#row-${supplier.id}`);
            if ($row.length) {
                const statusBadge = supplier.isActive ?
                    '<span class="badge bg-success">Active</span>' :
                    '<span class="badge bg-danger">Inactive</span>';

                $row.find('td').eq(1).text(supplier.name);
                $row.find('td').eq(2).text(supplier.email);
                $row.find('td').eq(3).text(supplier.mobile);
                $row.find('td').eq(4).text(supplier.address);
                $row.find('td').eq(5).html(statusBadge);
            }
        }


        // Open delete modal
        function openDeleteModal(id, name) {
            currentSupplierId = id;
            $('#deleteItemName').text(name);
            $('#deleteModal').modal('show');
        }

        // Delete supplier
        function deleteSupplier() {
            showSpinner('confirmDeleteBtn');

            $.ajax({
                url: `/Suppliers/DeleteSupplier/${currentSupplierId}`,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(currentSupplierId),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(data) {
                    hideSpinner('confirmDeleteBtn');

                    if (data.success) {
                        showSuccess(data.message);
                        $('#deleteModal').modal('hide');

                        // Remove row from table
                        $(`#row-${currentSupplierId}`).remove();
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('confirmDeleteBtn');
                    console.error('Error:', error);
                    showError('An error occurred while deleting the supplier.');
                }
            });
        }

        // Show success notification
        function showSuccess(message) {
            toastr.success(message, 'Success', { timeOut: 5000 });
        }

        // Show error notification
        function showError(message) {
            toastr.error(message, 'Error', { timeOut: 5000 });
        }

        // Initialize page
        $(document).ready(function() {
            // Setup AJAX defaults for CSRF token
            const token = $('input[name="__RequestVerificationToken"]').val();
            if (token) {
                $.ajaxSetup({
                    beforeSend: function(xhr, settings) {
                        if (settings.type !== 'GET') {
                            xhr.setRequestHeader('RequestVerificationToken', token);
                        }
                    }
                });
            }
        });
    </script>
}

