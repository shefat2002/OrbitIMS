@model IEnumerable<OrbitIMS.Data.Product>

@{
    ViewData["Title"] = "Products";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Products</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add New Product
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="productsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Price</th>
                                    <th>Stock</th>
                                    <th>Category</th>
                                    <th>Supplier</th>
                                    <th>Created At</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr id="row-@item.Id">
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>@item.Description</td>
                                        <td>$@item.Price.ToString("F2")</td>
                                        <td>@item.StockQuantity</td>
                                        <td>@item.Category?.Name</td>
                                        <td>@item.Supplier?.Name</td>
                                        <td>@item.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(@item.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(@item.Id, '@item.Name')" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Product Modal (Create/Edit) -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    <input type="hidden" id="productId" value="0" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="productName" name="Name" required maxlength="100">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productPrice" class="form-label">Price <span class="text-danger">*</span></label>
                                <input type="number" step="0.01" min="0" class="form-control" id="productPrice" name="Price" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productStockQuantity" class="form-label">Stock Quantity <span class="text-danger">*</span></label>
                                <input type="number" min="0" class="form-control" id="productStockQuantity" name="StockQuantity" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productCategoryId" class="form-label">Category <span class="text-danger">*</span></label>
                                <select class="form-select" id="productCategoryId" name="CategoryId" required>
                                    <option value="">Select Category</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productSupplierId" class="form-label">Supplier <span class="text-danger">*</span></label>
                                <select class="form-select" id="productSupplierId" name="SupplierId" required>
                                    <option value="">Select Supplier</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="productDescription" name="Description" rows="3" maxlength="500"></textarea>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveProductBtn" onclick="saveProduct()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Product
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the product <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="deleteProduct()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentProductId = 0;
        let categoriesData = [];
        let suppliersData = [];

        // Clear form validation
        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        // Load dropdown data (categories and suppliers)
        function loadDropdownData() {
            return $.ajax({
                url: '/Products/GetDropdownData',
                type: 'GET',
                dataType: 'json'
            });
        }

        // Populate dropdowns
        function populateDropdowns(categories, suppliers) {
            categoriesData = categories;
            suppliersData = suppliers;

            // Populate category dropdown
            const categorySelect = document.getElementById('productCategoryId');
            categorySelect.innerHTML = '<option value="">Select Category</option>';
            categories.forEach(category => {
                categorySelect.innerHTML += `<option value="${category.id}">${category.name}</option>`;
            });

            // Populate supplier dropdown
            const supplierSelect = document.getElementById('productSupplierId');
            supplierSelect.innerHTML = '<option value="">Select Supplier</option>';
            suppliers.forEach(supplier => {
                supplierSelect.innerHTML += `<option value="${supplier.id}">${supplier.name}</option>`;
            });
        }

        // Get category name by ID
        function getCategoryName(categoryId) {
            const category = categoriesData.find(c => c.id === categoryId);
            return category ? category.name : '';
        }

        // Get supplier name by ID
        function getSupplierName(supplierId) {
            const supplier = suppliersData.find(s => s.id === supplierId);
            return supplier ? supplier.name : '';
        }

        // Open create modal
        function openCreateModal() {
            document.getElementById('productModalLabel').textContent = 'Add New Product';
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '0';
            currentProductId = 0;
            clearValidation();

            // Load dropdown data
            loadDropdownData().done(function(data) {
                if (data.success) {
                    populateDropdowns(data.data.categories, data.data.suppliers);
                } else {
                    showError(data.message);
                }
            }).fail(function() {
                showError('Error loading dropdown data');
            });
        }

        // Open edit modal
        function openEditModal(id) {
            currentProductId = id;
            document.getElementById('productModalLabel').textContent = 'Edit Product';
            
            // Load dropdown data first, then product data
            loadDropdownData().done(function(dropdownData) {
                if (dropdownData.success) {
                    populateDropdowns(dropdownData.data.categories, dropdownData.data.suppliers);
                    
                    // Now load product data
                    $.ajax({
                        url: `/Products/GetProduct/${id}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(data) {
                            if (data.success) {
                                document.getElementById('productId').value = data.data.id;
                                document.getElementById('productName').value = data.data.name;
                                document.getElementById('productDescription').value = data.data.description;
                                document.getElementById('productPrice').value = data.data.price;
                                document.getElementById('productStockQuantity').value = data.data.stockQuantity;
                                document.getElementById('productCategoryId').value = data.data.categoryId;
                                document.getElementById('productSupplierId').value = data.data.supplierId;
                                clearValidation();
                                
                                // Show modal
                                const modal = new bootstrap.Modal(document.getElementById('productModal'));
                                modal.show();
                            } else {
                                showError(data.message);
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Error:', error);
                            showError('Error loading product data');
                        }
                    });
                } else {
                    showError(dropdownData.message);
                }
            }).fail(function() {
                showError('Error loading dropdown data');
            });
        }

        // Save product (create or update)
        function saveProduct() {
            const productData = {
                Id: parseInt(document.getElementById('productId').value),
                Name: document.getElementById('productName').value,
                Description: document.getElementById('productDescription').value,
                Price: parseFloat(document.getElementById('productPrice').value),
                StockQuantity: parseInt(document.getElementById('productStockQuantity').value),
                CategoryId: parseInt(document.getElementById('productCategoryId').value),
                SupplierId: parseInt(document.getElementById('productSupplierId').value)
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            // Validate Name
            if (!productData.Name || productData.Name.trim() === '') {
                document.getElementById('productName').classList.add('is-invalid');
                document.querySelector('#productName + .invalid-feedback').textContent = 'Product name is required.';
                isValid = false;
            }

            // Validate Price
            if (isNaN(productData.Price) || productData.Price <= 0) {
                document.getElementById('productPrice').classList.add('is-invalid');
                document.querySelector('#productPrice + .invalid-feedback').textContent = 'Please enter a valid price greater than 0.';
                isValid = false;
            }

            // Validate Stock Quantity
            if (isNaN(productData.StockQuantity) || productData.StockQuantity < 0) {
                document.getElementById('productStockQuantity').classList.add('is-invalid');
                document.querySelector('#productStockQuantity + .invalid-feedback').textContent = 'Please enter a valid stock quantity.';
                isValid = false;
            }

            // Validate Category
            if (isNaN(productData.CategoryId) || productData.CategoryId <= 0) {
                document.getElementById('productCategoryId').classList.add('is-invalid');
                document.querySelector('#productCategoryId + .invalid-feedback').textContent = 'Please select a category.';
                isValid = false;
            }

            // Validate Supplier
            if (isNaN(productData.SupplierId) || productData.SupplierId <= 0) {
                document.getElementById('productSupplierId').classList.add('is-invalid');
                document.querySelector('#productSupplierId + .invalid-feedback').textContent = 'Please select a supplier.';
                isValid = false;
            }

            if (!isValid) return;

            showSpinner('saveProductBtn');

            const url = productData.Id === 0 ? '/Products/CreateProduct' : '/Products/UpdateProduct';
            
            // Using jQuery AJAX
            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(productData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('saveProductBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#productModal').modal('hide');
                        
                        if (productData.Id === 0) {
                            // Add new row to table
                            addRowToTable(data.data);
                        } else {
                            // Update existing row
                            updateRowInTable(data.data);
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('saveProductBtn');
                    console.error('Error:', error);
                    showError('An error occurred while saving the product.');
                }
            });
        }

        // Add new row to table
        function addRowToTable(product) {
            const tbody = document.querySelector('#productsTable tbody');
            const statusBadge = product.isActive ? 
                '<span class="badge bg-success">Active</span>' : 
                '<span class="badge bg-danger">Inactive</span>';
            
            const newRow = `
                <tr id="row-${product.id}">
                    <td>${product.id}</td>
                    <td>${product.name}</td>
                    <td>${product.description || ''}</td>
                    <td>$${product.price.toFixed(2)}</td>
                    <td>${product.stockQuantity}</td>
                    <td>${product.category ? product.category.name : getCategoryName(product.categoryId)}</td>
                    <td>${product.supplier ? product.supplier.name : getSupplierName(product.supplierId)}</td>
                    <td>${new Date(product.createdAt).toLocaleDateString('en-GB')}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${product.id})" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(${product.id}, '${product.name}')" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
            
            tbody.insertAdjacentHTML('afterbegin', newRow);
        }

        // Update existing row in table
        function updateRowInTable(product) {
            const row = document.getElementById(`row-${product.id}`);
            if (row) {
                const statusBadge = product.isActive ? 
                    '<span class="badge bg-success">Active</span>' : 
                    '<span class="badge bg-danger">Inactive</span>';
                
                row.cells[1].textContent = product.name;
                row.cells[2].textContent = product.description || '';
                row.cells[3].textContent = `$${product.price.toFixed(2)}`;
                row.cells[4].textContent = product.stockQuantity;
                row.cells[5].textContent = product.category ? product.category.name : getCategoryName(product.categoryId);
                row.cells[6].textContent = product.supplier ? product.supplier.name : getSupplierName(product.supplierId);
                row.cells[8].innerHTML = statusBadge;
            }
        }

        // Open delete modal
        function openDeleteModal(id, name) {
            currentProductId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Delete product
        function deleteProduct() {
            showSpinner('confirmDeleteBtn');
            
            // Using jQuery AJAX
            $.ajax({
                url: `/Products/DeleteProduct/${currentProductId}`,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(currentProductId),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                },
                success: function(data) {
                    hideSpinner('confirmDeleteBtn');
                    
                    if (data.success) {
                        showSuccess(data.message);
                        $('#deleteModal').modal('hide');
                        
                        // Remove row from table
                        const row = document.getElementById(`row-${currentProductId}`);
                        if (row) {
                            row.remove();
                        }
                    } else {
                        showError(data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideSpinner('confirmDeleteBtn');
                    console.error('Error:', error);
                    showError('An error occurred while deleting the product.');
                }
            });
        }

        // Initialize page
        $(document).ready(function() {
            // Setup CSRF token for all jQuery AJAX requests
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                        var token = $('input[name=__RequestVerificationToken]').val();
                        if (token) {
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        }
                    }
                }
            });
        });
    </script>
}
