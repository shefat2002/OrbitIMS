@model IEnumerable<OrbitIMS.Data.Category>

@{
    ViewData["Title"] = "Categories";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Categories</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#categoryModal" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add New Category
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="categoriesTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Created At</th>
                                    <th>Created By</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr id="row-@item.Id">
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>@item.Description</td>
                                        <td>@item.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        <td>@item.CreatedBy</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(@item.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(@item.Id, '@item.Name')" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Category Modal (Create/Edit) -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">Add New Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="categoryForm">
                    <input type="hidden" id="categoryId" value="0" />
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Category Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="categoryName" name="Name" required maxlength="100">
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="mb-3">
                        <label for="categoryDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="categoryDescription" name="Description" rows="3" maxlength="500"></textarea>
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCategoryBtn" onclick="saveCategory()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Save Category
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the category <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="deleteCategory()">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentCategoryId = 0;

        // Show loading spinner
        function showSpinner(buttonId) {
            const button = document.getElementById(buttonId);
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.remove('d-none');
            button.disabled = true;
        }

        // Hide loading spinner
        function hideSpinner(buttonId) {
            const button = document.getElementById(buttonId);
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.add('d-none');
            button.disabled = false;
        }

        // Clear form validation
        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        // Open create modal
        function openCreateModal() {
            document.getElementById('categoryModalLabel').textContent = 'Add New Category';
            document.getElementById('categoryForm').reset();
            document.getElementById('categoryId').value = '0';
            currentCategoryId = 0;
            clearValidation();
        }

        // Open edit modal
        function openEditModal(id) {
            currentCategoryId = id;
            document.getElementById('categoryModalLabel').textContent = 'Edit Category';
            
            // Get category data
            fetch(`/Categories/GetCategory/${id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('categoryId').value = data.data.id;
                        document.getElementById('categoryName').value = data.data.name;
                        document.getElementById('categoryDescription').value = data.data.description;
                        clearValidation();
                        
                        // Show modal
                        const modal = new bootstrap.Modal(document.getElementById('categoryModal'));
                        modal.show();
                    } else {
                        showError(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError('Error loading category data');
                });
        }

        // Save category (create or update)
        function saveCategory() {
            const form = document.getElementById('categoryForm');
            const formData = new FormData(form);
            
            const categoryData = {
                Id: parseInt(document.getElementById('categoryId').value),
                Name: formData.get('Name'),
                Description: formData.get('Description')
            };

            // Client-side validation
            clearValidation();
            let isValid = true;

            if (!categoryData.Name || categoryData.Name.trim() === '') {
                document.getElementById('categoryName').classList.add('is-invalid');
                document.querySelector('#categoryName + .invalid-feedback').textContent = 'Category name is required.';
                isValid = false;
            }

            if (!isValid) return;

            showSpinner('saveCategoryBtn');

            const url = categoryData.Id === 0 ? '/Categories/CreateCategory' : '/Categories/UpdateCategory';
            
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(categoryData)
            })
            .then(response => response.json())
            .then(data => {
                hideSpinner('saveCategoryBtn');
                
                if (data.success) {
                    showSuccess(data.message);
                    bootstrap.Modal.getInstance(document.getElementById('categoryModal')).hide();
                    
                    if (categoryData.Id === 0) {
                        // Add new row to table
                        addRowToTable(data.data);
                    } else {
                        // Update existing row
                        updateRowInTable(data.data);
                    }
                } else {
                    showError(data.message);
                }
            })
            .catch(error => {
                hideSpinner('saveCategoryBtn');
                console.error('Error:', error);
                showError('An error occurred while saving the category.');
            });
        }

        // Add new row to table
        function addRowToTable(category) {
            const tbody = document.querySelector('#categoriesTable tbody');
            const statusBadge = category.isActive ? 
                '<span class="badge bg-success">Active</span>' : 
                '<span class="badge bg-danger">Inactive</span>';
            
            const newRow = `
                <tr id="row-${category.id}">
                    <td>${category.id}</td>
                    <td>${category.name}</td>
                    <td>${category.description}</td>
                    <td>${new Date(category.createdAt).toLocaleDateString('en-GB')}</td>
                    <td>${category.createdBy}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${category.id})" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="openDeleteModal(${category.id}, '${category.name}')" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
            
            tbody.insertAdjacentHTML('afterbegin', newRow);
        }

        // Update existing row in table
        function updateRowInTable(category) {
            const row = document.getElementById(`row-${category.id}`);
            if (row) {
                const statusBadge = category.isActive ? 
                    '<span class="badge bg-success">Active</span>' : 
                    '<span class="badge bg-danger">Inactive</span>';
                
                row.cells[1].textContent = category.name;
                row.cells[2].textContent = category.description;
                row.cells[5].innerHTML = statusBadge;
            }
        }

        // Open delete modal
        function openDeleteModal(id, name) {
            currentCategoryId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Delete category
        function deleteCategory() {
            showSpinner('confirmDeleteBtn');
            
            fetch('/Categories/DeleteCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(currentCategoryId)
            })
            .then(response => response.json())
            .then(data => {
                hideSpinner('confirmDeleteBtn');
                
                if (data.success) {
                    showSuccess(data.message);
                    bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                    
                    // Remove row from table
                    const row = document.getElementById(`row-${currentCategoryId}`);
                    if (row) {
                        row.remove();
                    }
                } else {
                    showError(data.message);
                }
            })
            .catch(error => {
                hideSpinner('confirmDeleteBtn');
                console.error('Error:', error);
                showError('An error occurred while deleting the category.');
            });
        }

        // Show success notification
        function showSuccess(message) {
            toastr.success(message, 'Success', { timeOut: 5000 });
        }

        // Show error notification
        function showError(message) {
            toastr.error(message, 'Error', { timeOut: 5000 });
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Add CSRF token to all AJAX requests
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (token) {
                // Set default headers for all fetch requests
                const originalFetch = window.fetch;
                window.fetch = function(url, options = {}) {
                    if (!options.headers) options.headers = {};
                    if (typeof options.headers.append === 'function') {
                        options.headers.append('RequestVerificationToken', token);
                    } else {
                        options.headers['RequestVerificationToken'] = token;
                    }
                    return originalFetch(url, options);
                };
            }
        });
    </script>
}

